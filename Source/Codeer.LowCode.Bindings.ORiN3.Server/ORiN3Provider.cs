using Codeer.LowCode.Bindings.ORiN3.Server.TypeBranch;
using Codeer.LowCode.Blazor.Repository;
using Design.ORiN3.Provider.V1;
using Design.ORiN3.Provider.V1.AutoGenerated;
using Design.ORiN3.Provider.V1.Base;
using Design.ORiN3.Provider.V1.Characteristic;
using Message.ORiN3.Provider.V1.Branch.Switcher;
using System.Diagnostics;

namespace Codeer.LowCode.Bindings.ORiN3.Server
{
    internal class ORiN3Provider : IDisposable
    {
        private class ORiN3Root(IRootObject rootObject) : ORiN3Object(rootObject)
        {
            public IRootObject RootObject { get; } = rootObject;
        }

        private class ORiN3Object(IORiN3Object orin3Object)
        {
            public IORiN3Object Self { get; } = orin3Object;
            public IList<ORiN3Object> Children { get; } = [];
        }

        private readonly Guid _remoteEngineId;
        private IRootObject? _rootObject;
        private readonly O3Setting.ORiN3RootObjectSetting _rootSetting;
        private readonly bool _instanceCreated;
        private bool _disposedValue;
        private readonly ORiN3Root _objectTree;
        private Tuple<int, Guid[], string[]> _registeredIdAndNames;

        public ORiN3Provider(Guid remoteEngineId, IRootObject rootObject, O3Setting.ORiN3RootObjectSetting rootSetting, bool instanceCreated)
        {
            _remoteEngineId = remoteEngineId;
            _rootObject = rootObject;
            _rootSetting = rootSetting;
            _objectTree = new ORiN3Root(rootObject);
            _instanceCreated = instanceCreated;
        }

        ~ORiN3Provider()
        {
            Debug.Assert(false);
            Dispose(disposing: false);
        }

        internal async Task<IDictionary<string, object?>> GetValuesAsync(CancellationToken token)
        {
            Debug.Assert(!_disposedValue);

            var values = await _rootObject!.GetValuesAsync(_registeredIdAndNames.Item1, token).ConfigureAwait(false);
            Debug.Assert(_registeredIdAndNames.Item3.Length == values.Length);
            var result = new Dictionary<string, object?>();
            for (var i = 0; i < values.Length; ++i)
            {
                if (values[i].Succeeded)
                {
                    result.Add(_registeredIdAndNames.Item3[i], values[i].Value);
                }
                else
                {
                    result.Add(_registeredIdAndNames.Item3[i], null);
                }
            }
            return result;
        }

        internal async Task<MultiTypeValue> GetValueAsync(string name, CancellationToken token)
        {
            Debug.Assert(!_disposedValue);

            var orin3Object = GetObjectByName(name);
            var variable = (IVariable)orin3Object.Self;
            var branch = new CreateMultiTypeValueBranch(variable);
            await TypeSwitcher.ExecuteAsync(variable.ORiN3ValueType, branch, token);
            return branch.Value;
        }

        private IEnumerable<ORiN3Object> EnumObject()
        {
            foreach (var it in _objectTree.Children)
            {
                foreach (var it2 in EnumObject(it))
                {
                    yield return it2;
                }
                yield return it;
            }
        }

        private IEnumerable<ORiN3Object> EnumObject(ORiN3Object orin3Object)
        {
            foreach (var it in orin3Object.Children)
            {
                foreach (var it2 in EnumObject(it))
                {
                    yield return it2;
                }
                yield return it;
            }
        }

        private ORiN3Object GetObjectByName(string name)
        {
            foreach (var it in EnumObject())
            {
                if (it.Self.Name == name)
                {
                    return it;
                }
            }

            throw new Exception();
        }

        internal async Task CreateObjectAsync(O3Setting o3Setting, O3TreeSetting o3TreeSetting, CancellationToken token)
        {
            Debug.Assert(!_disposedValue);

            var remoteEngine = o3TreeSetting.Objects.Where(_ => _.Id == _remoteEngineId).Single();
            var root = remoteEngine.Children.Where(_ => _.Id == _rootSetting!.Id).Single();
            await CreateObjectAsync(o3Setting, o3TreeSetting, _objectTree!, root, token).ConfigureAwait(false);
            var variables = EnumObject().Where(_ => _.Self.ORiN3ObjectType == ORiN3ObjectType.Variable).ToArray();
            var variableIds = variables.Select(_ => _.Self.Id).ToArray();
            var variableNames = variables.Select(_ => _.Self.Name).ToArray();
            var registeredId = await _rootObject!.RegisterValuesAsync(variableIds, token).ConfigureAwait(false);
            _registeredIdAndNames = new Tuple<int, Guid[], string[]>(registeredId, variableIds, variableNames);
            return;
        }

        private async Task CreateObjectAsync(O3Setting o3Setting, O3TreeSetting o3TreeSetting, ORiN3Object parent, O3TreeSetting.TreeObject tree, CancellationToken token)
        {
            foreach (var child in tree.Children)
            {
                switch (child.ObjectType)
                {
                    case O3TreeSetting.ObjectType.Controller:
                        {
                            var setting = o3Setting.GetController(child.Id);
                            var controller = await CreateOrAttachControllerAsync(parent, setting, token).ConfigureAwait(false);
                            var orin3Object = new ORiN3Object(controller);
                            parent.Children.Add(orin3Object);
                            await CreateObjectAsync(o3Setting, o3TreeSetting, orin3Object, child, token).ConfigureAwait(false);
                            break;
                        }
                    case O3TreeSetting.ObjectType.Module:
                        {
                            var setting = o3Setting.GetModule(child.Id);
                            var module = await CreateOrAttachModuleAsync(parent, setting, token).ConfigureAwait(false);
                            var orin3Object = new ORiN3Object(module);
                            parent.Children.Add(orin3Object);
                            await CreateObjectAsync(o3Setting, o3TreeSetting, orin3Object, child, token).ConfigureAwait(false);
                            break;
                        }
                    case O3TreeSetting.ObjectType.Variable:
                        {
                            var setting = o3Setting.GetVariable(child.Id);
                            var variable = await CreateOrAttachVariableAsync(parent, setting, token).ConfigureAwait(false);
                            var orin3Object = new ORiN3Object(variable);
                            parent.Children.Add(orin3Object);
                            break;
                        }
                    case O3TreeSetting.ObjectType.Event:
                    case O3TreeSetting.ObjectType.File:
                    case O3TreeSetting.ObjectType.Job:
                    case O3TreeSetting.ObjectType.Stream:
                        break;
                    case O3TreeSetting.ObjectType.RemoteEngine:
                    case O3TreeSetting.ObjectType.Root:
                    default:
                        Debug.Assert(false);
                        break;
                }
            }
        }

        private async Task<IController> CreateOrAttachControllerAsync(ORiN3Object parent, O3Setting.ORiN3ObjectSetting targetSetting, CancellationToken token)
        {
            var informations = await ((IParent)parent.Self).GetChildInformationsAsync(token).ConfigureAwait(false);
            foreach (var info in informations)
            {
                if (info.ORiN3ObjectType == ORiN3ObjectType.Controller && info.Name == targetSetting.Name)
                {
                    var candidate = await ((IParent)parent.Self).GetChildAsync(info.Id, token).ConfigureAwait(false);
                    if (candidate.Option == targetSetting.Option)
                    {
                        return (IController)candidate;
                    }
                }
            }

            var controller = await ((IControllerCreator)parent.Self).CreateControllerAsync(targetSetting.Name, targetSetting.Type, targetSetting.Option, token).ConfigureAwait(false);
            await controller.ConnectAsync(token).ConfigureAwait(false);
            return controller;
        }

        private async Task<IModule> CreateOrAttachModuleAsync(ORiN3Object parent, O3Setting.ORiN3ObjectSetting targetSetting, CancellationToken token)
        {
            var informations = await ((IParent)parent.Self).GetChildInformationsAsync(token).ConfigureAwait(false);
            foreach (var info in informations)
            {
                if (info.ORiN3ObjectType == ORiN3ObjectType.Module && info.Name == targetSetting.Name)
                {
                    var candidate = await ((IParent)parent.Self).GetChildAsync(info.Id, token).ConfigureAwait(false);
                    if (candidate.Option == targetSetting.Option)
                    {
                        return (IModule)candidate;
                    }
                }
            }

            var module = await ((IChildCreator)parent.Self).CreateModuleAsync(targetSetting.Name, targetSetting.Type, targetSetting.Option, token).ConfigureAwait(false);
            return module;
        }

        private async Task<IVariable> CreateOrAttachVariableAsync(ORiN3Object parent, O3Setting.ORiN3VariableSetting targetSetting, CancellationToken token)
        {
            var informations = await ((IParent)parent.Self).GetChildInformationsAsync(token).ConfigureAwait(false);
            foreach (var info in informations)
            {
                if (info.ORiN3ObjectType == ORiN3ObjectType.Variable && info.Name == targetSetting.Name)
                {
                    var candidate = await ((IParent)parent.Self).GetChildAsync(info.Id, token).ConfigureAwait(false);
                    if (candidate.Option == targetSetting.Option)
                    {
                        return (IVariable)candidate;
                    }
                }
            }

            var branch = new CreateVariableBranch((IChildCreator)parent.Self, targetSetting.Name, targetSetting.Type, targetSetting.Option);
            await TypeSwitcher.ExecuteAsync(targetSetting.ValueType, branch, token);
            return branch.Variable;
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!_disposedValue)
            {
                if (disposing)
                {
                    if (_instanceCreated)
                    {
                        _rootObject!.ShutdownAsync().Wait();
                    }
                    _rootObject!.Dispose();
                    _rootObject = null;
                }
                _disposedValue = true;
            }
        }
    }
}
