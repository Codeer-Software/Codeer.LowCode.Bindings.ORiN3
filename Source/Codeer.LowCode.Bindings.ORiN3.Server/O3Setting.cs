using Design.ORiN3.Provider.Core.V1.Telemetry;
using Design.ORiN3.Provider.V1.AutoGenerated;
using System.Text.Json.Nodes;

namespace Codeer.LowCode.Bindings.ORiN3.Server
{
    internal class O3Setting
    {
        internal record ORiN3RemoteEngineSetting(Guid Id, string Name, string Comment, string Host, int Port, int Protocol, string CertificateFile, string CertificatePassword);
        internal record ORiN3RootObjectSetting(Guid Id, string ProviderId, string Version, string Host, string Name,
            string Comment, bool PortAutoAllocationEnabled, int Port, bool ThreadSafeMode,
            bool UseRemoteEngineTelemetrySetting, ORiN3LogLevel LogLevel, int Protocol, bool SpecifyCertificate, string CertificateFile,
            string CertificatePassword, IList<TelemetryEndpoint> TelemetryEndpoints, IDictionary<string, string> Extension);
        internal record TelemetryEndpoint(string Uri, string ProxyAddress, ProxySetting ProxySetting, TelemetryTypeFlag TelemetryTypeFlag, TelemetryProtocolType ProtocolType);
        internal record ORiN3ObjectSetting(Guid Id, string Name, string Comment, string Type, string Option, string Tag);
        internal record ORiN3VariableSetting(Guid Id, string Name, string Comment, string Type, string Option, ORiN3ValueType ValueType, string Tag)
            : ORiN3ObjectSetting(Id, Name, Comment, Type, Option, Tag);

        public IList<ORiN3RemoteEngineSetting> RemoteEngines { get; } = [];
        public IList<ORiN3RootObjectSetting> RootObjects { get; } = [];
        public IList<ORiN3ObjectSetting> Controllers { get; } = [];
        public IList<ORiN3ObjectSetting> Modules { get; } = [];
        public IList<ORiN3ObjectSetting> Events { get; } = [];
        public IList<ORiN3ObjectSetting> Files { get; } = [];
        public IList<ORiN3ObjectSetting> Jobs { get; } = [];
        public IList<ORiN3ObjectSetting> Streams { get; } = [];
        public IList<ORiN3VariableSetting> Variables { get; } = [];

        public O3Setting(JsonNode json)
        {
            foreach (var remoteEngine in json["RemoteEngines"]!.AsArray())
            {
                var id = remoteEngine!["Id"]!.GetValue<string>();
                var name = remoteEngine!["Name"]!.GetValue<string>();
                var comment = remoteEngine!["Comment"]!.GetValue<string>();
                var host = remoteEngine!["Host"]!.GetValue<string>();
                var port = remoteEngine!["Port"]!.GetValue<int>();
                var protocol = remoteEngine!["Protocol"]!.GetValue<int>();
                var certificateFile = remoteEngine!["CertificateFile"]!.GetValue<string>();
                var certificatePassword = remoteEngine!["CertificatePassword"]!.GetValue<string>(); // 暗号化されている
                RemoteEngines.Add(new(Guid.Parse(id), name, comment, host, port, protocol, certificateFile, certificatePassword));
            }

            foreach (var root in json!["RootObjects"]!.AsArray())
            {
                var id = root!["Id"]!.GetValue<string>();
                var providerId = root!["ProviderId"]!.GetValue<string>();
                var name = root!["Name"]!.GetValue<string>();
                var comment = root!["Comment"]!.GetValue<string>();
                var version = root!["Version"]!.GetValue<string>();
                var host = root!["Host"]!.GetValue<string>();
                var portAutoAllocationEnabled = root!["PortAutoAllocationEnabled"]!.GetValue<bool>();
                var port = root!["Port"]!.GetValue<int>();
                var threadSafeMode = root!["IsThreadSafeMode"]!.GetValue<bool>();
                var useRemoteEngineTelemetrySetting = root!["UseRemoteEngineTelemetrySetting"]!.GetValue<bool>();
                var logLevel = Enum.Parse<ORiN3LogLevel>(root!["LogLevel"]!.GetValue<string>());
                var protocol = root!["Protocol"]!.GetValue<int>();
                var specifyCertificate = root!["SpecifyCertificate"]!.GetValue<bool>();
                var certificateFile = root!["CertificateFile"]!.GetValue<string>();
                var certificatePassword = root!["CertificatePassword"]!.GetValue<string>(); // 暗号化されている
                var telemetryEndpoints = new List<TelemetryEndpoint>();
                foreach (var endpoint in root!["TelemetryEndpoints"]!.AsArray())
                {
                    var uri = endpoint!["Uri"]!.GetValue<string>();
                    var proxyAddress = endpoint!["ProxyAddress"]!.GetValue<string>();
                    var proxySetting = (ProxySetting)endpoint!["ProxySetting"]!.GetValue<int>();
                    var telemetryTypeFlag = (TelemetryTypeFlag)endpoint!["TelemetryTypeFlag"]!.GetValue<int>();
                    var protocolType = (TelemetryProtocolType)endpoint!["ProtocolType"]!.GetValue<int>();
                    telemetryEndpoints.Add(new(uri, proxyAddress, proxySetting, telemetryTypeFlag, protocolType));
                }
                var extension = new Dictionary<string, string>();
                foreach (var it in root!["Extension"]!.AsArray())
                {
                    var key = it!["Key"]!.GetValue<string>();
                    var value = it!["Value"]!.GetValue<string>();
                    extension.Add(key, value);
                }
                RootObjects.Add(new(Guid.Parse(id), providerId, version, host, name, comment, portAutoAllocationEnabled,
                    port, threadSafeMode, useRemoteEngineTelemetrySetting, logLevel, protocol, specifyCertificate,
                    certificateFile, certificatePassword, telemetryEndpoints, extension));
            }

            foreach (var controller in json!["Controllers"]!.AsArray())
            {
                Controllers.Add(CreateORiN3Object(controller!));
            }

            foreach (var module in json!["Modules"]!.AsArray())
            {
                Controllers.Add(CreateORiN3Object(module!));
            }

            foreach (var variable in json!["Variables"]!.AsArray())
            {
                var id = variable!["Id"]!.GetValue<string>();
                var name = variable!["Name"]!.GetValue<string>();
                var comment = variable!["Comment"]!.GetValue<string>();
                var type = variable!["Type"]!.GetValue<string>();
                var option = variable!["Option"]!.GetValue<string>();
                var valueType = variable!["ValueType"]!.GetValue<int>();
                var tag = variable!["Tag"]!.GetValue<string>();
                Variables.Add(new(Guid.Parse(id), name, comment, type, option, ToValueType(valueType), tag));
            }

            foreach (var @event in json!["Events"]!.AsArray())
            {
                Controllers.Add(CreateORiN3Object(@event!));
            }

            foreach (var file in json!["Files"]!.AsArray())
            {
                Controllers.Add(CreateORiN3Object(file!));
            }

            foreach (var job in json!["Jobs"]!.AsArray())
            {
                Controllers.Add(CreateORiN3Object(job!));
            }

            foreach (var stream in json!["Streams"]!.AsArray())
            {
                Controllers.Add(CreateORiN3Object(stream!));
            }
        }

        private static ORiN3ObjectSetting CreateORiN3Object(JsonNode json)
        {
            var id = json["Id"]!.GetValue<string>();
            var name = json["Name"]!.GetValue<string>();
            var comment = json["Comment"]!.GetValue<string>();
            var type = json["Type"]!.GetValue<string>();
            var option = json["Option"]!.GetValue<string>();
            var tag = json["Tag"]!.GetValue<string>();
            return new(Guid.Parse(id), name, comment, type, option, tag);
        }

        public static ORiN3ValueType ToValueType(int target)
        {
            return target switch
            {
                0 => ORiN3ValueType.Orin3Bool,
                1 => ORiN3ValueType.Orin3Int8,
                2 => ORiN3ValueType.Orin3Uint8,
                3 => ORiN3ValueType.Orin3Int16,
                4 => ORiN3ValueType.Orin3Uint16,
                5 => ORiN3ValueType.Orin3Int32,
                6 => ORiN3ValueType.Orin3Uint32,
                7 => ORiN3ValueType.Orin3Int64,
                8 => ORiN3ValueType.Orin3Uint64,
                9 => ORiN3ValueType.Orin3Float,
                10 => ORiN3ValueType.Orin3Double,
                11 => ORiN3ValueType.Orin3Datetime,
                12 => ORiN3ValueType.Orin3String,

                13 => ORiN3ValueType.Orin3NullableBool,
                14 => ORiN3ValueType.Orin3NullableInt8,
                15 => ORiN3ValueType.Orin3NullableUint8,
                16 => ORiN3ValueType.Orin3NullableInt16,
                17 => ORiN3ValueType.Orin3NullableUint16,
                18 => ORiN3ValueType.Orin3NullableInt32,
                19 => ORiN3ValueType.Orin3NullableUint32,
                20 => ORiN3ValueType.Orin3NullableInt64,
                21 => ORiN3ValueType.Orin3NullableUint64,
                22 => ORiN3ValueType.Orin3NullableFloat,
                23 => ORiN3ValueType.Orin3NullableDouble,
                24 => ORiN3ValueType.Orin3NullableDatetime,

                25 => ORiN3ValueType.Orin3BoolArray,
                26 => ORiN3ValueType.Orin3Int8Array,
                27 => ORiN3ValueType.Orin3Uint8Array,
                28 => ORiN3ValueType.Orin3Int16Array,
                29 => ORiN3ValueType.Orin3Uint16Array,
                30 => ORiN3ValueType.Orin3Int32Array,
                31 => ORiN3ValueType.Orin3Uint32Array,
                32 => ORiN3ValueType.Orin3Int64Array,
                33 => ORiN3ValueType.Orin3Uint64Array,
                34 => ORiN3ValueType.Orin3FloatArray,
                35 => ORiN3ValueType.Orin3DoubleArray,
                36 => ORiN3ValueType.Orin3DatetimeArray,
                37 => ORiN3ValueType.Orin3StringArray,

                38 => ORiN3ValueType.Orin3NullableBoolArray,
                39 => ORiN3ValueType.Orin3NullableInt8Array,
                40 => ORiN3ValueType.Orin3NullableUint8Array,
                41 => ORiN3ValueType.Orin3NullableInt16Array,
                42 => ORiN3ValueType.Orin3NullableUint16Array,
                43 => ORiN3ValueType.Orin3NullableInt32Array,
                44 => ORiN3ValueType.Orin3NullableUint32Array,
                45 => ORiN3ValueType.Orin3NullableInt64Array,
                46 => ORiN3ValueType.Orin3NullableUint64Array,
                47 => ORiN3ValueType.Orin3NullableFloatArray,
                48 => ORiN3ValueType.Orin3NullableDoubleArray,
                49 => ORiN3ValueType.Orin3NullableDatetimeArray,

                50 => ORiN3ValueType.Orin3Object,
                _ => throw new NotImplementedException(),
            };
        }

        public ORiN3RemoteEngineSetting GetRemoteEngine(Guid id)
        {
            foreach (var remoteEngine in RemoteEngines)
            {
                if (remoteEngine.Id == id)
                {
                    return remoteEngine;
                }
            }
            throw new Exception($"Remote Engine not found: {id}");
        }

        public ORiN3RootObjectSetting GetRootObject(Guid id)
        {
            foreach (var rootObject in RootObjects)
            {
                if (rootObject.Id == id)
                {
                    return rootObject;
                }
            }
            throw new Exception($"Root Object not found: {id}");
        }

        public ORiN3ObjectSetting GetController(Guid id)
        {
            foreach (var controller in Controllers)
            {
                if (controller.Id == id)
                {
                    return controller;
                }
            }
            throw new Exception($"Controller not found: {id}");
        }

        public ORiN3ObjectSetting GetModule(Guid id)
        {
            foreach (var module in Modules)
            {
                if (module.Id == id)
                {
                    return module;
                }
            }
            throw new Exception($"Module not found: {id}");
        }

        public ORiN3VariableSetting GetVariable(Guid id)
        {
            foreach (var variable in Variables)
            {
                if (variable.Id == id)
                {
                    return variable;
                }
            }
            throw new Exception($"Variable not found: {id}");
        }
    }
}
