@using Codeer.LowCode.Bindings.ORiN3.Designs
@using Codeer.LowCode.Bindings.ORiN3.Fields
@using Codeer.LowCode.Blazor.Components
@using Codeer.LowCode.Blazor.Components.Interop
@using Microsoft.JSInterop
@inherits FieldComponentBase<DeviceStateGanttChartField>

<div class="gantt-wrap" style="@DivStyle">

  <!-- ==== Left: machine label column (sticky) ==== -->
  <svg class="label-svg"
  width="@LabelWidth"
  height="@TotalHeight"
  viewBox="0 0 @LabelWidth @TotalHeight">

    @* Row labels & horizontal thin lines *@
    @for (int r = 0; r < Machines.Count; r++)
    {
      var yTop = RowH + r * RowH;

      <g>
        <text x="@(5)"
        y="@(yTop + RowH / 2)"
        class="label"
        fill="@Color">@Machines[r].Name</text>
      </g>

      <line x1="0" x2="@LabelWidth"
      y1="@yTop" y2="@yTop"
      class="g-thin"
            stroke="@Color" />
    }

    <line x1="0" x2="@LabelWidth"
    y1="@TotalHeight" y2="@TotalHeight"
    class="g-thin"
          stroke="@Color" />
    <line x1="@LabelWidth" x2="@LabelWidth"
    y1="0" y2="@TotalHeight"
    class="g-thin"
          stroke="@Color" />
  </svg>

  <!-- ==== Right: timeline area ==== -->
  <div class="tl-scroll">
    <svg class="tl-svg"
    width="@TimelineWidth"
    height="@TotalHeight"
    viewBox="0 0 @TimelineWidth @TotalHeight">

      @* --- Time header --- *@
      @for (int h = StartHour; h <= EndHour; h++)
      {
        var cx = ((h - StartHour) * 60 / StepMin + ColPerHour / 2f) * CellW;

        <g>
          <text x="@cx"
          y="@(RowH / 2)"
          text-anchor="middle"
          dominant-baseline="middle"
          class="time"
          fill="@Color"
          >@h</text>
        </g>
      }

      @* --- Machine rows: status bars & future area --- *@
      @foreach (var (machine, idx) in Machines.Select((m, i) => (m, i)))
      {
        var yTop = RowH + idx * RowH;

        int i = 0;
        foreach (var seg in machine.Segments)
        {
          var x = i * CellW;
          <rect x="@x" y="@yTop"
          width="@CellW" height="@RowH"
          fill="@seg.Color" />
          i++;
        }

      }

      @* --- Thin grid (vertical / horizontal) --- *@
      @for (int c = 0; c < Cols; c++)
      {
        var x = c * CellW;
        <line x1="@x" y1="@RowH"
        x2="@x" y2="@TotalHeight"
        class="g-thin"
              stroke="@Color" />
      }
      @for (int r = 1; r <= Machines.Count + 1; r++)
      {
        var y = r * RowH;
        <line x1="0"
        y1="@y"
        x2="@TimelineWidth"
        y2="@y"
        class="g-thin"
              stroke="@Color" />
      }

      @* --- Thick grid (hour) --- *@
      @for (int h = 0; h <= EndHour - StartHour; h++)
      {
        var x = h * ColPerHour * CellW;
        <line x1="@x" y1="0" x2="@x" y2="@RowH" class="g-thin" stroke="@Color" />
      }
    </svg>
  </div>
</div>

<style>
  /* ===== Layout ===== */
  .gantt-wrap {
  display: inline-flex;
  width: fit-content; /* shrink to chart width */
  max-width: 100%; /* but never exceed viewport */
  }

  .label-svg {
  position: sticky;
  left: 0;
  z-index: 1; /* above timeline */
  flex: none;
  }

  .tl-scroll {
  overflow-x: auto; /* horizontal scroll */
  overflow-y: hidden;
  }

  .tl-svg {
  display: block;
  }

  /* ===== Colors & lines ===== */
  .g-thin {
  stroke-width: 0.5;
  }

  .label {
  text-anchor: start;
  dominant-baseline: middle;
  font-size: 12px;
  }

  .time {
  text-anchor: middle;
  dominant-baseline: middle;
  font-size: 12px;
  font-weight: bold;
  }
</style>

@code {
  string DivStyle => $"border:1.5px solid {Color}";
  string Color
  {
    get
    {
      var x = Field.Color.Or(Field.GetFontAppearance()?.Color).Or("#000000")!;
      return x;
    }
  }

  /* ===== Parameters ===== */
  int StartHour => Field.Design.StartHour;
  int EndHour => Field.Design.EndHour;
  int StepMin => Field.Design.StepMin;

  /* ===== Layout constants ===== */
  static readonly int CellW = 24;   // column width
  static readonly int RowH = 26;   // row height
  static readonly int LabelWidth = 70;   // label column width

  int ColPerHour => 60 / StepMin;
  int Cols => (EndHour - StartHour) * ColPerHour;
  int TimelineWidth => Cols * CellW;
  int TotalHeight => RowH * (Machines.Count + 1);
  IReadOnlyList<MachineRow> Machines => Field.Machines;
}
